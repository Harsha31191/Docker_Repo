package com.digitalwallet.backend.service;

import com.digitalwallet.backend.model.User;
import com.digitalwallet.backend.model.Wallet;
import com.digitalwallet.backend.repository.UserRepository;
import com.digitalwallet.backend.repository.WalletRepository;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class AuthService {

    private final UserRepository userRepository;
    private final WalletRepository walletRepository;
    private final PasswordEncoder passwordEncoder;

    public AuthService(UserRepository userRepository,
                       WalletRepository walletRepository,
                       PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.walletRepository = walletRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public void register(String fullName, String email, String password) {
        // check duplicate email
        if (userRepository.existsByEmail(email)) {
            throw new IllegalArgumentException("Email already registered");
        }

        try {
            User user = new User();
            user.setFullName(fullName);
            user.setEmail(email);
            user.setPasswordHash(passwordEncoder.encode(password));

            userRepository.save(user);

            // create wallet for new user
            Wallet wallet = new Wallet();
            wallet.setUser(user);
            walletRepository.save(wallet);

        } catch (DataIntegrityViolationException e) {
            throw new IllegalArgumentException("Email already registered");
        } catch (Exception e) {
            throw new RuntimeException("Failed to register user: " + e.getMessage());
        }
    }

    // login logic (already in your code)
    public String loginAndCreateToken(String email, String password) {
        // existing login logic here
        return "dummy-token"; // replace with actual token logic
    }

    // used by TokenAuthenticationFilter
    public Optional<User> findUserByToken(String token) {
        return Optional.empty(); // implement your token lookup logic
    }
}
