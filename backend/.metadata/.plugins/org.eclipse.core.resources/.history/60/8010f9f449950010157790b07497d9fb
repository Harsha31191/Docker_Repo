package com.digitalwallet.backend.security;

import com.digitalwallet.backend.service.AuthService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.*;
import java.util.List;

@Configuration
public class SecurityConfig {
  private final AuthService authService;

  public SecurityConfig(AuthService authService) {
    this.authService = authService;
  }

  @Bean
  public SecurityFilterChain filterChain(HttpSecurity http, @Value("${cors.allowed-origins}") String allowedOrigin) throws Exception {
    TokenAuthenticationFilter tokenFilter = new TokenAuthenticationFilter(authService);

    http = http.cors(cors -> {
      CorsConfiguration config = new CorsConfiguration();
      config.setAllowedOrigins(List.of(allowedOrigin));
      config.setAllowedMethods(List.of("GET","POST","PUT","DELETE","OPTIONS"));
      config.setAllowedHeaders(List.of("*"));
      cors.configurationSource(request -> config);
    });

    http.csrf(csrf -> csrf.disable());
    http.sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
    http.authorizeHttpRequests(auth -> auth
      .requestMatchers("/api/v1/auth/**").permitAll()
      .anyRequest().authenticated()
    );

    http.addFilterBefore(tokenFilter, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class);

    return http.build();
  }

  @Bean
  public org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder passwordEncoder() {
    return new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder();
  }
}
